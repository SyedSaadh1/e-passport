// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int       @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  createdBy         Int?
  createdDate       DateTime  @default(now())
  modifiedBy        Int?
  modifiedDate      DateTime?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime
  createdBy    Int?
  createdDate  DateTime  @default(now())
  modifiedBy   Int?
  modifiedDate DateTime?
  user         User      @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier   String
  token        String    @unique
  expires      DateTime
  createdBy    Int?
  createdDate  DateTime  @default(now())
  modifiedBy   Int?
  modifiedDate DateTime?

  @@unique([identifier, token])
}

model User {
  id                   Int                @id @default(autoincrement())
  ePassportUserId      String             @unique
  title                String
  firstName            String
  middleName           String
  surname              String
  dateOfBirth          DateTime
  nationality          String
  email                String             @unique
  mobileNumber         String
  emiratesIdNumber     String             @unique
  emiratesIdExpiryDate DateTime
  extendedEmiratesIdExpiryDate DateTime?
  uaeHomeAddress       String
  registrationDate     DateTime           @default(now())
  status               String
  name                 String?
  emailVerified        DateTime?
  image                String?
  createdBy            Int?
  createdDate          DateTime           @default(now())
  modifiedBy           Int?
  modifiedDate         DateTime?
  accounts             Account[]
  sessions             Session[]
  documents            Document[]
  verificationLogs     VerificationLog[]
  adminActions         AdminAction[]
  communicationLogs    CommunicationLog[]
  ePassportCards       ePassportCard[]
}

model Document {
  id           Int       @id @default(autoincrement())
  userId       Int
  documentType String
  filePath     String
  status       String
  uploadDate   DateTime  @default(now())
  createdBy    Int?
  createdDate  DateTime  @default(now())
  modifiedBy   Int?
  modifiedDate DateTime?
  user         User      @relation(fields: [userId], references: [id])
}

model VerificationLog {
  id           Int       @id @default(autoincrement())
  userId       Int
  action       String
  actionDate   DateTime  @default(now())
  notes        String?
  createdBy    Int?
  createdDate  DateTime  @default(now())
  modifiedBy   Int?
  modifiedDate DateTime?
  user         User      @relation(fields: [userId], references: [id])
}

model AdminAction {
  id           Int       @id @default(autoincrement())
  userId       Int
  actionType   String
  actionDate   DateTime  @default(now())
  adminId      Int
  createdBy    Int?
  createdDate  DateTime  @default(now())
  modifiedBy   Int?
  modifiedDate DateTime?
  user         User      @relation(fields: [userId], references: [id])
}

model CommunicationLog {
  id                  Int       @id @default(autoincrement())
  userId              Int
  communicationMethod String
  message             String
  timestamp           DateTime  @default(now())
  createdBy           Int?
  createdDate         DateTime  @default(now())
  modifiedBy          Int?
  modifiedDate        DateTime?
  user                User      @relation(fields: [userId], references: [id])
}

model ePassportCard {
  id             Int       @id @default(autoincrement())
  userId         Int
  cardData       Json
  generationDate DateTime  @default(now())
  createdBy      Int?
  createdDate    DateTime  @default(now())
  modifiedBy     Int?
  modifiedDate   DateTime?
  user           User      @relation(fields: [userId], references: [id])
}
